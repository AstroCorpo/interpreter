Grammar:

Rule 0     S' -> statements
Rule 1     statements -> statements stmt
Rule 2     statements -> stmt
Rule 3     stmt -> RETURN expr ;
Rule 4     stmt -> CONTINUE ;
Rule 5     stmt -> BREAK ;
Rule 6     stmt -> print_stmt
Rule 7     stmt -> assign_expr
Rule 8     stmt -> for_stmt
Rule 9     stmt -> while_stmt
Rule 10    stmt -> if_stmt
Rule 11    stmt -> { statements }
Rule 12    stmt -> ;
Rule 13    if_stmt -> IF ( rel_expr ) stmt  [precedence=nonassoc, level=1]
Rule 14    if_stmt -> IF ( rel_expr ) stmt ELSE stmt  [precedence=nonassoc, level=2]
Rule 15    int_referance -> INTNUM
Rule 16    int_referance -> referance
Rule 17    for_stmt -> FOR referance = int_referance : int_referance stmt
Rule 18    while_stmt -> WHILE ( rel_expr ) stmt
Rule 19    print_stmt -> PRINT expr
Rule 20    value -> STRING
Rule 21    value -> FLOATNUM
Rule 22    value -> INTNUM
Rule 23    value_vector -> value_vector , value
Rule 24    value_vector -> value
Rule 25    referance -> ID [ value_vector ]
Rule 26    referance -> ID
Rule 27    expr -> expr DOTDIV expr  [precedence=left, level=5]
Rule 28    expr -> expr DOTMUL expr  [precedence=left, level=5]
Rule 29    expr -> expr DOTSUB expr  [precedence=left, level=4]
Rule 30    expr -> expr DOTADD expr  [precedence=left, level=4]
Rule 31    expr -> expr DIV expr  [precedence=left, level=5]
Rule 32    expr -> expr MUL expr  [precedence=left, level=5]
Rule 33    expr -> expr SUB expr  [precedence=left, level=4]
Rule 34    expr -> expr ADD expr  [precedence=left, level=4]
Rule 35    expr -> rel_expr
Rule 36    expr -> value_vector
Rule 37    rel_expr -> expr NEQ expr  [precedence=nonassoc, level=3]
Rule 38    rel_expr -> expr EQ expr  [precedence=nonassoc, level=3]
Rule 39    rel_expr -> expr GTE expr  [precedence=nonassoc, level=3]
Rule 40    rel_expr -> expr LTE expr  [precedence=nonassoc, level=3]
Rule 41    rel_expr -> expr GT expr  [precedence=nonassoc, level=3]
Rule 42    rel_expr -> expr LT expr  [precedence=nonassoc, level=3]
Rule 43    assign_expr -> referance DIVASSIGN expr
Rule 44    assign_expr -> referance MULASSIGN expr
Rule 45    assign_expr -> referance SUBASSIGN expr
Rule 46    assign_expr -> referance ADDASSIGN expr
Rule 47    assign_expr -> referance = expr

Unused terminals:

    ZEROS
    ONES
    EYE

Terminals, with rules where they appear:

(                    : 13 14 18
)                    : 13 14 18
,                    : 23
:                    : 17
;                    : 3 4 5 12
=                    : 17 47
ADD                  : 34
ADDASSIGN            : 46
BREAK                : 5
CONTINUE             : 4
DIV                  : 31
DIVASSIGN            : 43
DOTADD               : 30
DOTDIV               : 27
DOTMUL               : 28
DOTSUB               : 29
ELSE                 : 14
EQ                   : 38
EYE                  : 
FLOATNUM             : 21
FOR                  : 17
GT                   : 41
GTE                  : 39
ID                   : 25 26
IF                   : 13 14
INTNUM               : 15 22
LT                   : 42
LTE                  : 40
MUL                  : 32
MULASSIGN            : 44
NEQ                  : 37
ONES                 : 
PRINT                : 19
RETURN               : 3
STRING               : 20
SUB                  : 33
SUBASSIGN            : 45
WHILE                : 18
ZEROS                : 
[                    : 25
]                    : 25
error                : 
{                    : 11
}                    : 11

Nonterminals, with rules where they appear:

assign_expr          : 7
expr                 : 3 19 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 37 37 38 38 39 39 40 40 41 41 42 42 43 44 45 46 47
for_stmt             : 8
if_stmt              : 10
int_referance        : 17 17
print_stmt           : 6
referance            : 16 17 43 44 45 46 47
rel_expr             : 13 14 18 35
statements           : 1 11 0
stmt                 : 1 2 13 14 14 17 18
value                : 23 24
value_vector         : 23 25 36
while_stmt           : 9


state 0

    (0) S' -> . statements
    (1) statements -> . statements stmt
    (2) statements -> . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (19) print_stmt -> . PRINT expr
    (43) assign_expr -> . referance DIVASSIGN expr
    (44) assign_expr -> . referance MULASSIGN expr
    (45) assign_expr -> . referance SUBASSIGN expr
    (46) assign_expr -> . referance ADDASSIGN expr
    (47) assign_expr -> . referance = expr
    (17) for_stmt -> . FOR referance = int_referance : int_referance stmt
    (18) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (25) referance -> . ID [ value_vector ]
    (26) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    statements                     shift and go to state 1
    stmt                           shift and go to state 2
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 1

    (0) S' -> statements .
    (1) statements -> statements . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (19) print_stmt -> . PRINT expr
    (43) assign_expr -> . referance DIVASSIGN expr
    (44) assign_expr -> . referance MULASSIGN expr
    (45) assign_expr -> . referance SUBASSIGN expr
    (46) assign_expr -> . referance ADDASSIGN expr
    (47) assign_expr -> . referance = expr
    (17) for_stmt -> . FOR referance = int_referance : int_referance stmt
    (18) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (25) referance -> . ID [ value_vector ]
    (26) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 19
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 2

    (2) statements -> stmt .
    RETURN          reduce using rule 2 (statements -> stmt .)
    CONTINUE        reduce using rule 2 (statements -> stmt .)
    BREAK           reduce using rule 2 (statements -> stmt .)
    {               reduce using rule 2 (statements -> stmt .)
    ;               reduce using rule 2 (statements -> stmt .)
    PRINT           reduce using rule 2 (statements -> stmt .)
    FOR             reduce using rule 2 (statements -> stmt .)
    WHILE           reduce using rule 2 (statements -> stmt .)
    IF              reduce using rule 2 (statements -> stmt .)
    ID              reduce using rule 2 (statements -> stmt .)
    $end            reduce using rule 2 (statements -> stmt .)
    }               reduce using rule 2 (statements -> stmt .)


state 3

    (3) stmt -> RETURN . expr ;
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 20
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 4

    (12) stmt -> ; .
    RETURN          reduce using rule 12 (stmt -> ; .)
    CONTINUE        reduce using rule 12 (stmt -> ; .)
    BREAK           reduce using rule 12 (stmt -> ; .)
    {               reduce using rule 12 (stmt -> ; .)
    ;               reduce using rule 12 (stmt -> ; .)
    PRINT           reduce using rule 12 (stmt -> ; .)
    FOR             reduce using rule 12 (stmt -> ; .)
    WHILE           reduce using rule 12 (stmt -> ; .)
    IF              reduce using rule 12 (stmt -> ; .)
    ID              reduce using rule 12 (stmt -> ; .)
    $end            reduce using rule 12 (stmt -> ; .)
    }               reduce using rule 12 (stmt -> ; .)
    ELSE            reduce using rule 12 (stmt -> ; .)


state 5

    (4) stmt -> CONTINUE . ;
    ;               shift and go to state 27


state 6

    (5) stmt -> BREAK . ;
    ;               shift and go to state 28


state 7

    (6) stmt -> print_stmt .
    RETURN          reduce using rule 6 (stmt -> print_stmt .)
    CONTINUE        reduce using rule 6 (stmt -> print_stmt .)
    BREAK           reduce using rule 6 (stmt -> print_stmt .)
    {               reduce using rule 6 (stmt -> print_stmt .)
    ;               reduce using rule 6 (stmt -> print_stmt .)
    PRINT           reduce using rule 6 (stmt -> print_stmt .)
    FOR             reduce using rule 6 (stmt -> print_stmt .)
    WHILE           reduce using rule 6 (stmt -> print_stmt .)
    IF              reduce using rule 6 (stmt -> print_stmt .)
    ID              reduce using rule 6 (stmt -> print_stmt .)
    $end            reduce using rule 6 (stmt -> print_stmt .)
    }               reduce using rule 6 (stmt -> print_stmt .)
    ELSE            reduce using rule 6 (stmt -> print_stmt .)


state 8

    (7) stmt -> assign_expr .
    RETURN          reduce using rule 7 (stmt -> assign_expr .)
    CONTINUE        reduce using rule 7 (stmt -> assign_expr .)
    BREAK           reduce using rule 7 (stmt -> assign_expr .)
    {               reduce using rule 7 (stmt -> assign_expr .)
    ;               reduce using rule 7 (stmt -> assign_expr .)
    PRINT           reduce using rule 7 (stmt -> assign_expr .)
    FOR             reduce using rule 7 (stmt -> assign_expr .)
    WHILE           reduce using rule 7 (stmt -> assign_expr .)
    IF              reduce using rule 7 (stmt -> assign_expr .)
    ID              reduce using rule 7 (stmt -> assign_expr .)
    $end            reduce using rule 7 (stmt -> assign_expr .)
    }               reduce using rule 7 (stmt -> assign_expr .)
    ELSE            reduce using rule 7 (stmt -> assign_expr .)


state 9

    (8) stmt -> for_stmt .
    RETURN          reduce using rule 8 (stmt -> for_stmt .)
    CONTINUE        reduce using rule 8 (stmt -> for_stmt .)
    BREAK           reduce using rule 8 (stmt -> for_stmt .)
    {               reduce using rule 8 (stmt -> for_stmt .)
    ;               reduce using rule 8 (stmt -> for_stmt .)
    PRINT           reduce using rule 8 (stmt -> for_stmt .)
    FOR             reduce using rule 8 (stmt -> for_stmt .)
    WHILE           reduce using rule 8 (stmt -> for_stmt .)
    IF              reduce using rule 8 (stmt -> for_stmt .)
    ID              reduce using rule 8 (stmt -> for_stmt .)
    $end            reduce using rule 8 (stmt -> for_stmt .)
    }               reduce using rule 8 (stmt -> for_stmt .)
    ELSE            reduce using rule 8 (stmt -> for_stmt .)


state 10

    (9) stmt -> while_stmt .
    RETURN          reduce using rule 9 (stmt -> while_stmt .)
    CONTINUE        reduce using rule 9 (stmt -> while_stmt .)
    BREAK           reduce using rule 9 (stmt -> while_stmt .)
    {               reduce using rule 9 (stmt -> while_stmt .)
    ;               reduce using rule 9 (stmt -> while_stmt .)
    PRINT           reduce using rule 9 (stmt -> while_stmt .)
    FOR             reduce using rule 9 (stmt -> while_stmt .)
    WHILE           reduce using rule 9 (stmt -> while_stmt .)
    IF              reduce using rule 9 (stmt -> while_stmt .)
    ID              reduce using rule 9 (stmt -> while_stmt .)
    $end            reduce using rule 9 (stmt -> while_stmt .)
    }               reduce using rule 9 (stmt -> while_stmt .)
    ELSE            reduce using rule 9 (stmt -> while_stmt .)


state 11

    (10) stmt -> if_stmt .
    RETURN          reduce using rule 10 (stmt -> if_stmt .)
    CONTINUE        reduce using rule 10 (stmt -> if_stmt .)
    BREAK           reduce using rule 10 (stmt -> if_stmt .)
    {               reduce using rule 10 (stmt -> if_stmt .)
    ;               reduce using rule 10 (stmt -> if_stmt .)
    PRINT           reduce using rule 10 (stmt -> if_stmt .)
    FOR             reduce using rule 10 (stmt -> if_stmt .)
    WHILE           reduce using rule 10 (stmt -> if_stmt .)
    IF              reduce using rule 10 (stmt -> if_stmt .)
    ID              reduce using rule 10 (stmt -> if_stmt .)
    $end            reduce using rule 10 (stmt -> if_stmt .)
    }               reduce using rule 10 (stmt -> if_stmt .)
    ELSE            reduce using rule 10 (stmt -> if_stmt .)


state 12

    (11) stmt -> { . statements }
    (1) statements -> . statements stmt
    (2) statements -> . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (19) print_stmt -> . PRINT expr
    (43) assign_expr -> . referance DIVASSIGN expr
    (44) assign_expr -> . referance MULASSIGN expr
    (45) assign_expr -> . referance SUBASSIGN expr
    (46) assign_expr -> . referance ADDASSIGN expr
    (47) assign_expr -> . referance = expr
    (17) for_stmt -> . FOR referance = int_referance : int_referance stmt
    (18) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (25) referance -> . ID [ value_vector ]
    (26) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    statements                     shift and go to state 29
    stmt                           shift and go to state 2
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 13

    (19) print_stmt -> PRINT . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 30
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 14

    (43) assign_expr -> referance . DIVASSIGN expr
    (44) assign_expr -> referance . MULASSIGN expr
    (45) assign_expr -> referance . SUBASSIGN expr
    (46) assign_expr -> referance . ADDASSIGN expr
    (47) assign_expr -> referance . = expr
    DIVASSIGN       shift and go to state 31
    MULASSIGN       shift and go to state 32
    SUBASSIGN       shift and go to state 33
    ADDASSIGN       shift and go to state 34
    =               shift and go to state 35


state 15

    (17) for_stmt -> FOR . referance = int_referance : int_referance stmt
    (25) referance -> . ID [ value_vector ]
    (26) referance -> . ID
    ID              shift and go to state 18

    referance                      shift and go to state 36

state 16

    (18) while_stmt -> WHILE . ( rel_expr ) stmt
    (               shift and go to state 37


state 17

    (13) if_stmt -> IF . ( rel_expr ) stmt
    (14) if_stmt -> IF . ( rel_expr ) stmt ELSE stmt
    (               shift and go to state 38


state 18

    (25) referance -> ID . [ value_vector ]
    (26) referance -> ID .
    [               shift and go to state 39
    DIVASSIGN       reduce using rule 26 (referance -> ID .)
    MULASSIGN       reduce using rule 26 (referance -> ID .)
    SUBASSIGN       reduce using rule 26 (referance -> ID .)
    ADDASSIGN       reduce using rule 26 (referance -> ID .)
    =               reduce using rule 26 (referance -> ID .)
    :               reduce using rule 26 (referance -> ID .)
    RETURN          reduce using rule 26 (referance -> ID .)
    CONTINUE        reduce using rule 26 (referance -> ID .)
    BREAK           reduce using rule 26 (referance -> ID .)
    {               reduce using rule 26 (referance -> ID .)
    ;               reduce using rule 26 (referance -> ID .)
    PRINT           reduce using rule 26 (referance -> ID .)
    FOR             reduce using rule 26 (referance -> ID .)
    WHILE           reduce using rule 26 (referance -> ID .)
    IF              reduce using rule 26 (referance -> ID .)
    ID              reduce using rule 26 (referance -> ID .)


state 19

    (1) statements -> statements stmt .
    RETURN          reduce using rule 1 (statements -> statements stmt .)
    CONTINUE        reduce using rule 1 (statements -> statements stmt .)
    BREAK           reduce using rule 1 (statements -> statements stmt .)
    {               reduce using rule 1 (statements -> statements stmt .)
    ;               reduce using rule 1 (statements -> statements stmt .)
    PRINT           reduce using rule 1 (statements -> statements stmt .)
    FOR             reduce using rule 1 (statements -> statements stmt .)
    WHILE           reduce using rule 1 (statements -> statements stmt .)
    IF              reduce using rule 1 (statements -> statements stmt .)
    ID              reduce using rule 1 (statements -> statements stmt .)
    $end            reduce using rule 1 (statements -> statements stmt .)
    }               reduce using rule 1 (statements -> statements stmt .)


state 20

    (3) stmt -> RETURN expr . ;
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               shift and go to state 40
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48
    NEQ             shift and go to state 49
    EQ              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54


state 21

    (35) expr -> rel_expr .
    ;               reduce using rule 35 (expr -> rel_expr .)
    DOTDIV          reduce using rule 35 (expr -> rel_expr .)
    DOTMUL          reduce using rule 35 (expr -> rel_expr .)
    DOTSUB          reduce using rule 35 (expr -> rel_expr .)
    DOTADD          reduce using rule 35 (expr -> rel_expr .)
    DIV             reduce using rule 35 (expr -> rel_expr .)
    MUL             reduce using rule 35 (expr -> rel_expr .)
    SUB             reduce using rule 35 (expr -> rel_expr .)
    ADD             reduce using rule 35 (expr -> rel_expr .)
    NEQ             reduce using rule 35 (expr -> rel_expr .)
    EQ              reduce using rule 35 (expr -> rel_expr .)
    GTE             reduce using rule 35 (expr -> rel_expr .)
    LTE             reduce using rule 35 (expr -> rel_expr .)
    GT              reduce using rule 35 (expr -> rel_expr .)
    LT              reduce using rule 35 (expr -> rel_expr .)
    RETURN          reduce using rule 35 (expr -> rel_expr .)
    CONTINUE        reduce using rule 35 (expr -> rel_expr .)
    BREAK           reduce using rule 35 (expr -> rel_expr .)
    {               reduce using rule 35 (expr -> rel_expr .)
    PRINT           reduce using rule 35 (expr -> rel_expr .)
    FOR             reduce using rule 35 (expr -> rel_expr .)
    WHILE           reduce using rule 35 (expr -> rel_expr .)
    IF              reduce using rule 35 (expr -> rel_expr .)
    ID              reduce using rule 35 (expr -> rel_expr .)
    $end            reduce using rule 35 (expr -> rel_expr .)
    }               reduce using rule 35 (expr -> rel_expr .)
    ELSE            reduce using rule 35 (expr -> rel_expr .)
    )               reduce using rule 35 (expr -> rel_expr .)


state 22

    (36) expr -> value_vector .
    (23) value_vector -> value_vector . , value
    ;               reduce using rule 36 (expr -> value_vector .)
    DOTDIV          reduce using rule 36 (expr -> value_vector .)
    DOTMUL          reduce using rule 36 (expr -> value_vector .)
    DOTSUB          reduce using rule 36 (expr -> value_vector .)
    DOTADD          reduce using rule 36 (expr -> value_vector .)
    DIV             reduce using rule 36 (expr -> value_vector .)
    MUL             reduce using rule 36 (expr -> value_vector .)
    SUB             reduce using rule 36 (expr -> value_vector .)
    ADD             reduce using rule 36 (expr -> value_vector .)
    NEQ             reduce using rule 36 (expr -> value_vector .)
    EQ              reduce using rule 36 (expr -> value_vector .)
    GTE             reduce using rule 36 (expr -> value_vector .)
    LTE             reduce using rule 36 (expr -> value_vector .)
    GT              reduce using rule 36 (expr -> value_vector .)
    LT              reduce using rule 36 (expr -> value_vector .)
    RETURN          reduce using rule 36 (expr -> value_vector .)
    CONTINUE        reduce using rule 36 (expr -> value_vector .)
    BREAK           reduce using rule 36 (expr -> value_vector .)
    {               reduce using rule 36 (expr -> value_vector .)
    PRINT           reduce using rule 36 (expr -> value_vector .)
    FOR             reduce using rule 36 (expr -> value_vector .)
    WHILE           reduce using rule 36 (expr -> value_vector .)
    IF              reduce using rule 36 (expr -> value_vector .)
    ID              reduce using rule 36 (expr -> value_vector .)
    $end            reduce using rule 36 (expr -> value_vector .)
    }               reduce using rule 36 (expr -> value_vector .)
    ELSE            reduce using rule 36 (expr -> value_vector .)
    )               reduce using rule 36 (expr -> value_vector .)
    ,               shift and go to state 55


state 23

    (24) value_vector -> value .
    ,               reduce using rule 24 (value_vector -> value .)
    ;               reduce using rule 24 (value_vector -> value .)
    DOTDIV          reduce using rule 24 (value_vector -> value .)
    DOTMUL          reduce using rule 24 (value_vector -> value .)
    DOTSUB          reduce using rule 24 (value_vector -> value .)
    DOTADD          reduce using rule 24 (value_vector -> value .)
    DIV             reduce using rule 24 (value_vector -> value .)
    MUL             reduce using rule 24 (value_vector -> value .)
    SUB             reduce using rule 24 (value_vector -> value .)
    ADD             reduce using rule 24 (value_vector -> value .)
    NEQ             reduce using rule 24 (value_vector -> value .)
    EQ              reduce using rule 24 (value_vector -> value .)
    GTE             reduce using rule 24 (value_vector -> value .)
    LTE             reduce using rule 24 (value_vector -> value .)
    GT              reduce using rule 24 (value_vector -> value .)
    LT              reduce using rule 24 (value_vector -> value .)
    RETURN          reduce using rule 24 (value_vector -> value .)
    CONTINUE        reduce using rule 24 (value_vector -> value .)
    BREAK           reduce using rule 24 (value_vector -> value .)
    {               reduce using rule 24 (value_vector -> value .)
    PRINT           reduce using rule 24 (value_vector -> value .)
    FOR             reduce using rule 24 (value_vector -> value .)
    WHILE           reduce using rule 24 (value_vector -> value .)
    IF              reduce using rule 24 (value_vector -> value .)
    ID              reduce using rule 24 (value_vector -> value .)
    $end            reduce using rule 24 (value_vector -> value .)
    }               reduce using rule 24 (value_vector -> value .)
    ELSE            reduce using rule 24 (value_vector -> value .)
    ]               reduce using rule 24 (value_vector -> value .)
    )               reduce using rule 24 (value_vector -> value .)


state 24

    (20) value -> STRING .
    ,               reduce using rule 20 (value -> STRING .)
    ;               reduce using rule 20 (value -> STRING .)
    DOTDIV          reduce using rule 20 (value -> STRING .)
    DOTMUL          reduce using rule 20 (value -> STRING .)
    DOTSUB          reduce using rule 20 (value -> STRING .)
    DOTADD          reduce using rule 20 (value -> STRING .)
    DIV             reduce using rule 20 (value -> STRING .)
    MUL             reduce using rule 20 (value -> STRING .)
    SUB             reduce using rule 20 (value -> STRING .)
    ADD             reduce using rule 20 (value -> STRING .)
    NEQ             reduce using rule 20 (value -> STRING .)
    EQ              reduce using rule 20 (value -> STRING .)
    GTE             reduce using rule 20 (value -> STRING .)
    LTE             reduce using rule 20 (value -> STRING .)
    GT              reduce using rule 20 (value -> STRING .)
    LT              reduce using rule 20 (value -> STRING .)
    RETURN          reduce using rule 20 (value -> STRING .)
    CONTINUE        reduce using rule 20 (value -> STRING .)
    BREAK           reduce using rule 20 (value -> STRING .)
    {               reduce using rule 20 (value -> STRING .)
    PRINT           reduce using rule 20 (value -> STRING .)
    FOR             reduce using rule 20 (value -> STRING .)
    WHILE           reduce using rule 20 (value -> STRING .)
    IF              reduce using rule 20 (value -> STRING .)
    ID              reduce using rule 20 (value -> STRING .)
    $end            reduce using rule 20 (value -> STRING .)
    }               reduce using rule 20 (value -> STRING .)
    ELSE            reduce using rule 20 (value -> STRING .)
    ]               reduce using rule 20 (value -> STRING .)
    )               reduce using rule 20 (value -> STRING .)


state 25

    (21) value -> FLOATNUM .
    ,               reduce using rule 21 (value -> FLOATNUM .)
    ;               reduce using rule 21 (value -> FLOATNUM .)
    DOTDIV          reduce using rule 21 (value -> FLOATNUM .)
    DOTMUL          reduce using rule 21 (value -> FLOATNUM .)
    DOTSUB          reduce using rule 21 (value -> FLOATNUM .)
    DOTADD          reduce using rule 21 (value -> FLOATNUM .)
    DIV             reduce using rule 21 (value -> FLOATNUM .)
    MUL             reduce using rule 21 (value -> FLOATNUM .)
    SUB             reduce using rule 21 (value -> FLOATNUM .)
    ADD             reduce using rule 21 (value -> FLOATNUM .)
    NEQ             reduce using rule 21 (value -> FLOATNUM .)
    EQ              reduce using rule 21 (value -> FLOATNUM .)
    GTE             reduce using rule 21 (value -> FLOATNUM .)
    LTE             reduce using rule 21 (value -> FLOATNUM .)
    GT              reduce using rule 21 (value -> FLOATNUM .)
    LT              reduce using rule 21 (value -> FLOATNUM .)
    RETURN          reduce using rule 21 (value -> FLOATNUM .)
    CONTINUE        reduce using rule 21 (value -> FLOATNUM .)
    BREAK           reduce using rule 21 (value -> FLOATNUM .)
    {               reduce using rule 21 (value -> FLOATNUM .)
    PRINT           reduce using rule 21 (value -> FLOATNUM .)
    FOR             reduce using rule 21 (value -> FLOATNUM .)
    WHILE           reduce using rule 21 (value -> FLOATNUM .)
    IF              reduce using rule 21 (value -> FLOATNUM .)
    ID              reduce using rule 21 (value -> FLOATNUM .)
    $end            reduce using rule 21 (value -> FLOATNUM .)
    }               reduce using rule 21 (value -> FLOATNUM .)
    ELSE            reduce using rule 21 (value -> FLOATNUM .)
    ]               reduce using rule 21 (value -> FLOATNUM .)
    )               reduce using rule 21 (value -> FLOATNUM .)


state 26

    (22) value -> INTNUM .
    ,               reduce using rule 22 (value -> INTNUM .)
    ;               reduce using rule 22 (value -> INTNUM .)
    DOTDIV          reduce using rule 22 (value -> INTNUM .)
    DOTMUL          reduce using rule 22 (value -> INTNUM .)
    DOTSUB          reduce using rule 22 (value -> INTNUM .)
    DOTADD          reduce using rule 22 (value -> INTNUM .)
    DIV             reduce using rule 22 (value -> INTNUM .)
    MUL             reduce using rule 22 (value -> INTNUM .)
    SUB             reduce using rule 22 (value -> INTNUM .)
    ADD             reduce using rule 22 (value -> INTNUM .)
    NEQ             reduce using rule 22 (value -> INTNUM .)
    EQ              reduce using rule 22 (value -> INTNUM .)
    GTE             reduce using rule 22 (value -> INTNUM .)
    LTE             reduce using rule 22 (value -> INTNUM .)
    GT              reduce using rule 22 (value -> INTNUM .)
    LT              reduce using rule 22 (value -> INTNUM .)
    RETURN          reduce using rule 22 (value -> INTNUM .)
    CONTINUE        reduce using rule 22 (value -> INTNUM .)
    BREAK           reduce using rule 22 (value -> INTNUM .)
    {               reduce using rule 22 (value -> INTNUM .)
    PRINT           reduce using rule 22 (value -> INTNUM .)
    FOR             reduce using rule 22 (value -> INTNUM .)
    WHILE           reduce using rule 22 (value -> INTNUM .)
    IF              reduce using rule 22 (value -> INTNUM .)
    ID              reduce using rule 22 (value -> INTNUM .)
    $end            reduce using rule 22 (value -> INTNUM .)
    }               reduce using rule 22 (value -> INTNUM .)
    ELSE            reduce using rule 22 (value -> INTNUM .)
    ]               reduce using rule 22 (value -> INTNUM .)
    )               reduce using rule 22 (value -> INTNUM .)


state 27

    (4) stmt -> CONTINUE ; .
    RETURN          reduce using rule 4 (stmt -> CONTINUE ; .)
    CONTINUE        reduce using rule 4 (stmt -> CONTINUE ; .)
    BREAK           reduce using rule 4 (stmt -> CONTINUE ; .)
    {               reduce using rule 4 (stmt -> CONTINUE ; .)
    ;               reduce using rule 4 (stmt -> CONTINUE ; .)
    PRINT           reduce using rule 4 (stmt -> CONTINUE ; .)
    FOR             reduce using rule 4 (stmt -> CONTINUE ; .)
    WHILE           reduce using rule 4 (stmt -> CONTINUE ; .)
    IF              reduce using rule 4 (stmt -> CONTINUE ; .)
    ID              reduce using rule 4 (stmt -> CONTINUE ; .)
    $end            reduce using rule 4 (stmt -> CONTINUE ; .)
    }               reduce using rule 4 (stmt -> CONTINUE ; .)
    ELSE            reduce using rule 4 (stmt -> CONTINUE ; .)


state 28

    (5) stmt -> BREAK ; .
    RETURN          reduce using rule 5 (stmt -> BREAK ; .)
    CONTINUE        reduce using rule 5 (stmt -> BREAK ; .)
    BREAK           reduce using rule 5 (stmt -> BREAK ; .)
    {               reduce using rule 5 (stmt -> BREAK ; .)
    ;               reduce using rule 5 (stmt -> BREAK ; .)
    PRINT           reduce using rule 5 (stmt -> BREAK ; .)
    FOR             reduce using rule 5 (stmt -> BREAK ; .)
    WHILE           reduce using rule 5 (stmt -> BREAK ; .)
    IF              reduce using rule 5 (stmt -> BREAK ; .)
    ID              reduce using rule 5 (stmt -> BREAK ; .)
    $end            reduce using rule 5 (stmt -> BREAK ; .)
    }               reduce using rule 5 (stmt -> BREAK ; .)
    ELSE            reduce using rule 5 (stmt -> BREAK ; .)


state 29

    (11) stmt -> { statements . }
    (1) statements -> statements . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (19) print_stmt -> . PRINT expr
    (43) assign_expr -> . referance DIVASSIGN expr
    (44) assign_expr -> . referance MULASSIGN expr
    (45) assign_expr -> . referance SUBASSIGN expr
    (46) assign_expr -> . referance ADDASSIGN expr
    (47) assign_expr -> . referance = expr
    (17) for_stmt -> . FOR referance = int_referance : int_referance stmt
    (18) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (25) referance -> . ID [ value_vector ]
    (26) referance -> . ID
    }               shift and go to state 56
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 19
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 30

    (19) print_stmt -> PRINT expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    RETURN          reduce using rule 19 (print_stmt -> PRINT expr .)
    CONTINUE        reduce using rule 19 (print_stmt -> PRINT expr .)
    BREAK           reduce using rule 19 (print_stmt -> PRINT expr .)
    {               reduce using rule 19 (print_stmt -> PRINT expr .)
    ;               reduce using rule 19 (print_stmt -> PRINT expr .)
    PRINT           reduce using rule 19 (print_stmt -> PRINT expr .)
    FOR             reduce using rule 19 (print_stmt -> PRINT expr .)
    WHILE           reduce using rule 19 (print_stmt -> PRINT expr .)
    IF              reduce using rule 19 (print_stmt -> PRINT expr .)
    ID              reduce using rule 19 (print_stmt -> PRINT expr .)
    $end            reduce using rule 19 (print_stmt -> PRINT expr .)
    }               reduce using rule 19 (print_stmt -> PRINT expr .)
    ELSE            reduce using rule 19 (print_stmt -> PRINT expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48
    NEQ             shift and go to state 49
    EQ              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54


state 31

    (43) assign_expr -> referance DIVASSIGN . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 57
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 32

    (44) assign_expr -> referance MULASSIGN . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 58
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 33

    (45) assign_expr -> referance SUBASSIGN . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 59
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 34

    (46) assign_expr -> referance ADDASSIGN . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 60
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 35

    (47) assign_expr -> referance = . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 61
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 36

    (17) for_stmt -> FOR referance . = int_referance : int_referance stmt
    =               shift and go to state 62


state 37

    (18) while_stmt -> WHILE ( . rel_expr ) stmt
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    rel_expr                       shift and go to state 63
    expr                           shift and go to state 64
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 38

    (13) if_stmt -> IF ( . rel_expr ) stmt
    (14) if_stmt -> IF ( . rel_expr ) stmt ELSE stmt
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    rel_expr                       shift and go to state 65
    expr                           shift and go to state 64
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 39

    (25) referance -> ID [ . value_vector ]
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    value_vector                   shift and go to state 66
    value                          shift and go to state 23

state 40

    (3) stmt -> RETURN expr ; .
    RETURN          reduce using rule 3 (stmt -> RETURN expr ; .)
    CONTINUE        reduce using rule 3 (stmt -> RETURN expr ; .)
    BREAK           reduce using rule 3 (stmt -> RETURN expr ; .)
    {               reduce using rule 3 (stmt -> RETURN expr ; .)
    ;               reduce using rule 3 (stmt -> RETURN expr ; .)
    PRINT           reduce using rule 3 (stmt -> RETURN expr ; .)
    FOR             reduce using rule 3 (stmt -> RETURN expr ; .)
    WHILE           reduce using rule 3 (stmt -> RETURN expr ; .)
    IF              reduce using rule 3 (stmt -> RETURN expr ; .)
    ID              reduce using rule 3 (stmt -> RETURN expr ; .)
    $end            reduce using rule 3 (stmt -> RETURN expr ; .)
    }               reduce using rule 3 (stmt -> RETURN expr ; .)
    ELSE            reduce using rule 3 (stmt -> RETURN expr ; .)


state 41

    (27) expr -> expr DOTDIV . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 67
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 42

    (28) expr -> expr DOTMUL . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 68
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 43

    (29) expr -> expr DOTSUB . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 69
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 44

    (30) expr -> expr DOTADD . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 70
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 45

    (31) expr -> expr DIV . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 71
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 46

    (32) expr -> expr MUL . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 72
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 47

    (33) expr -> expr SUB . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 73
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 48

    (34) expr -> expr ADD . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 74
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 49

    (37) rel_expr -> expr NEQ . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 75
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 50

    (38) rel_expr -> expr EQ . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 76
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 51

    (39) rel_expr -> expr GTE . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 77
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 52

    (40) rel_expr -> expr LTE . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 78
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 53

    (41) rel_expr -> expr GT . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 79
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 54

    (42) rel_expr -> expr LT . expr
    (27) expr -> . expr DOTDIV expr
    (28) expr -> . expr DOTMUL expr
    (29) expr -> . expr DOTSUB expr
    (30) expr -> . expr DOTADD expr
    (31) expr -> . expr DIV expr
    (32) expr -> . expr MUL expr
    (33) expr -> . expr SUB expr
    (34) expr -> . expr ADD expr
    (35) expr -> . rel_expr
    (36) expr -> . value_vector
    (37) rel_expr -> . expr NEQ expr
    (38) rel_expr -> . expr EQ expr
    (39) rel_expr -> . expr GTE expr
    (40) rel_expr -> . expr LTE expr
    (41) rel_expr -> . expr GT expr
    (42) rel_expr -> . expr LT expr
    (23) value_vector -> . value_vector , value
    (24) value_vector -> . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    expr                           shift and go to state 80
    rel_expr                       shift and go to state 21
    value_vector                   shift and go to state 22
    value                          shift and go to state 23

state 55

    (23) value_vector -> value_vector , . value
    (20) value -> . STRING
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26

    value                          shift and go to state 81

state 56

    (11) stmt -> { statements } .
    RETURN          reduce using rule 11 (stmt -> { statements } .)
    CONTINUE        reduce using rule 11 (stmt -> { statements } .)
    BREAK           reduce using rule 11 (stmt -> { statements } .)
    {               reduce using rule 11 (stmt -> { statements } .)
    ;               reduce using rule 11 (stmt -> { statements } .)
    PRINT           reduce using rule 11 (stmt -> { statements } .)
    FOR             reduce using rule 11 (stmt -> { statements } .)
    WHILE           reduce using rule 11 (stmt -> { statements } .)
    IF              reduce using rule 11 (stmt -> { statements } .)
    ID              reduce using rule 11 (stmt -> { statements } .)
    $end            reduce using rule 11 (stmt -> { statements } .)
    }               reduce using rule 11 (stmt -> { statements } .)
    ELSE            reduce using rule 11 (stmt -> { statements } .)


state 57

    (43) assign_expr -> referance DIVASSIGN expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    RETURN          reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    CONTINUE        reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    BREAK           reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    {               reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    ;               reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    PRINT           reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    FOR             reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    WHILE           reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    IF              reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    ID              reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    $end            reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    }               reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    ELSE            reduce using rule 43 (assign_expr -> referance DIVASSIGN expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48
    NEQ             shift and go to state 49
    EQ              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54


state 58

    (44) assign_expr -> referance MULASSIGN expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    RETURN          reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    CONTINUE        reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    BREAK           reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    {               reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    ;               reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    PRINT           reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    FOR             reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    WHILE           reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    IF              reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    ID              reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    $end            reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    }               reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    ELSE            reduce using rule 44 (assign_expr -> referance MULASSIGN expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48
    NEQ             shift and go to state 49
    EQ              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54


state 59

    (45) assign_expr -> referance SUBASSIGN expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    RETURN          reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    CONTINUE        reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    BREAK           reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    {               reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    ;               reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    PRINT           reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    FOR             reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    WHILE           reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    IF              reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    ID              reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    $end            reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    }               reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    ELSE            reduce using rule 45 (assign_expr -> referance SUBASSIGN expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48
    NEQ             shift and go to state 49
    EQ              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54


state 60

    (46) assign_expr -> referance ADDASSIGN expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    RETURN          reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    CONTINUE        reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    BREAK           reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    {               reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    ;               reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    PRINT           reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    FOR             reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    WHILE           reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    IF              reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    ID              reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    $end            reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    }               reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    ELSE            reduce using rule 46 (assign_expr -> referance ADDASSIGN expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48
    NEQ             shift and go to state 49
    EQ              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54


state 61

    (47) assign_expr -> referance = expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    RETURN          reduce using rule 47 (assign_expr -> referance = expr .)
    CONTINUE        reduce using rule 47 (assign_expr -> referance = expr .)
    BREAK           reduce using rule 47 (assign_expr -> referance = expr .)
    {               reduce using rule 47 (assign_expr -> referance = expr .)
    ;               reduce using rule 47 (assign_expr -> referance = expr .)
    PRINT           reduce using rule 47 (assign_expr -> referance = expr .)
    FOR             reduce using rule 47 (assign_expr -> referance = expr .)
    WHILE           reduce using rule 47 (assign_expr -> referance = expr .)
    IF              reduce using rule 47 (assign_expr -> referance = expr .)
    ID              reduce using rule 47 (assign_expr -> referance = expr .)
    $end            reduce using rule 47 (assign_expr -> referance = expr .)
    }               reduce using rule 47 (assign_expr -> referance = expr .)
    ELSE            reduce using rule 47 (assign_expr -> referance = expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48
    NEQ             shift and go to state 49
    EQ              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54


state 62

    (17) for_stmt -> FOR referance = . int_referance : int_referance stmt
    (15) int_referance -> . INTNUM
    (16) int_referance -> . referance
    (25) referance -> . ID [ value_vector ]
    (26) referance -> . ID
    INTNUM          shift and go to state 84
    ID              shift and go to state 18

    referance                      shift and go to state 82
    int_referance                  shift and go to state 83

state 63

    (18) while_stmt -> WHILE ( rel_expr . ) stmt
    (35) expr -> rel_expr .
    )               shift and go to state 85
    NEQ             reduce using rule 35 (expr -> rel_expr .)
    EQ              reduce using rule 35 (expr -> rel_expr .)
    GTE             reduce using rule 35 (expr -> rel_expr .)
    LTE             reduce using rule 35 (expr -> rel_expr .)
    GT              reduce using rule 35 (expr -> rel_expr .)
    LT              reduce using rule 35 (expr -> rel_expr .)
    DOTDIV          reduce using rule 35 (expr -> rel_expr .)
    DOTMUL          reduce using rule 35 (expr -> rel_expr .)
    DOTSUB          reduce using rule 35 (expr -> rel_expr .)
    DOTADD          reduce using rule 35 (expr -> rel_expr .)
    DIV             reduce using rule 35 (expr -> rel_expr .)
    MUL             reduce using rule 35 (expr -> rel_expr .)
    SUB             reduce using rule 35 (expr -> rel_expr .)
    ADD             reduce using rule 35 (expr -> rel_expr .)


state 64

    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    NEQ             shift and go to state 49
    EQ              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48


state 65

    (13) if_stmt -> IF ( rel_expr . ) stmt
    (14) if_stmt -> IF ( rel_expr . ) stmt ELSE stmt
    (35) expr -> rel_expr .
    )               shift and go to state 86
    NEQ             reduce using rule 35 (expr -> rel_expr .)
    EQ              reduce using rule 35 (expr -> rel_expr .)
    GTE             reduce using rule 35 (expr -> rel_expr .)
    LTE             reduce using rule 35 (expr -> rel_expr .)
    GT              reduce using rule 35 (expr -> rel_expr .)
    LT              reduce using rule 35 (expr -> rel_expr .)
    DOTDIV          reduce using rule 35 (expr -> rel_expr .)
    DOTMUL          reduce using rule 35 (expr -> rel_expr .)
    DOTSUB          reduce using rule 35 (expr -> rel_expr .)
    DOTADD          reduce using rule 35 (expr -> rel_expr .)
    DIV             reduce using rule 35 (expr -> rel_expr .)
    MUL             reduce using rule 35 (expr -> rel_expr .)
    SUB             reduce using rule 35 (expr -> rel_expr .)
    ADD             reduce using rule 35 (expr -> rel_expr .)


state 66

    (25) referance -> ID [ value_vector . ]
    (23) value_vector -> value_vector . , value
    ]               shift and go to state 87
    ,               shift and go to state 55


state 67

    (27) expr -> expr DOTDIV expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 27 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 27 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 27 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 27 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 27 (expr -> expr DOTDIV expr .)
    DIV             reduce using rule 27 (expr -> expr DOTDIV expr .)
    MUL             reduce using rule 27 (expr -> expr DOTDIV expr .)
    SUB             reduce using rule 27 (expr -> expr DOTDIV expr .)
    ADD             reduce using rule 27 (expr -> expr DOTDIV expr .)
    NEQ             reduce using rule 27 (expr -> expr DOTDIV expr .)
    EQ              reduce using rule 27 (expr -> expr DOTDIV expr .)
    GTE             reduce using rule 27 (expr -> expr DOTDIV expr .)
    LTE             reduce using rule 27 (expr -> expr DOTDIV expr .)
    GT              reduce using rule 27 (expr -> expr DOTDIV expr .)
    LT              reduce using rule 27 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 27 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 27 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 27 (expr -> expr DOTDIV expr .)
    {               reduce using rule 27 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 27 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 27 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 27 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 27 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 27 (expr -> expr DOTDIV expr .)
    $end            reduce using rule 27 (expr -> expr DOTDIV expr .)
    }               reduce using rule 27 (expr -> expr DOTDIV expr .)
    ELSE            reduce using rule 27 (expr -> expr DOTDIV expr .)
    )               reduce using rule 27 (expr -> expr DOTDIV expr .)


state 68

    (28) expr -> expr DOTMUL expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 28 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 28 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 28 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 28 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 28 (expr -> expr DOTMUL expr .)
    DIV             reduce using rule 28 (expr -> expr DOTMUL expr .)
    MUL             reduce using rule 28 (expr -> expr DOTMUL expr .)
    SUB             reduce using rule 28 (expr -> expr DOTMUL expr .)
    ADD             reduce using rule 28 (expr -> expr DOTMUL expr .)
    NEQ             reduce using rule 28 (expr -> expr DOTMUL expr .)
    EQ              reduce using rule 28 (expr -> expr DOTMUL expr .)
    GTE             reduce using rule 28 (expr -> expr DOTMUL expr .)
    LTE             reduce using rule 28 (expr -> expr DOTMUL expr .)
    GT              reduce using rule 28 (expr -> expr DOTMUL expr .)
    LT              reduce using rule 28 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 28 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 28 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 28 (expr -> expr DOTMUL expr .)
    {               reduce using rule 28 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 28 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 28 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 28 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 28 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 28 (expr -> expr DOTMUL expr .)
    $end            reduce using rule 28 (expr -> expr DOTMUL expr .)
    }               reduce using rule 28 (expr -> expr DOTMUL expr .)
    ELSE            reduce using rule 28 (expr -> expr DOTMUL expr .)
    )               reduce using rule 28 (expr -> expr DOTMUL expr .)


state 69

    (29) expr -> expr DOTSUB expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 29 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 29 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 29 (expr -> expr DOTSUB expr .)
    SUB             reduce using rule 29 (expr -> expr DOTSUB expr .)
    ADD             reduce using rule 29 (expr -> expr DOTSUB expr .)
    NEQ             reduce using rule 29 (expr -> expr DOTSUB expr .)
    EQ              reduce using rule 29 (expr -> expr DOTSUB expr .)
    GTE             reduce using rule 29 (expr -> expr DOTSUB expr .)
    LTE             reduce using rule 29 (expr -> expr DOTSUB expr .)
    GT              reduce using rule 29 (expr -> expr DOTSUB expr .)
    LT              reduce using rule 29 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 29 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 29 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 29 (expr -> expr DOTSUB expr .)
    {               reduce using rule 29 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 29 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 29 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 29 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 29 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 29 (expr -> expr DOTSUB expr .)
    $end            reduce using rule 29 (expr -> expr DOTSUB expr .)
    }               reduce using rule 29 (expr -> expr DOTSUB expr .)
    ELSE            reduce using rule 29 (expr -> expr DOTSUB expr .)
    )               reduce using rule 29 (expr -> expr DOTSUB expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DIV             shift and go to state 45
    MUL             shift and go to state 46


state 70

    (30) expr -> expr DOTADD expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 30 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 30 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 30 (expr -> expr DOTADD expr .)
    SUB             reduce using rule 30 (expr -> expr DOTADD expr .)
    ADD             reduce using rule 30 (expr -> expr DOTADD expr .)
    NEQ             reduce using rule 30 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 30 (expr -> expr DOTADD expr .)
    GTE             reduce using rule 30 (expr -> expr DOTADD expr .)
    LTE             reduce using rule 30 (expr -> expr DOTADD expr .)
    GT              reduce using rule 30 (expr -> expr DOTADD expr .)
    LT              reduce using rule 30 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 30 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 30 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 30 (expr -> expr DOTADD expr .)
    {               reduce using rule 30 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 30 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 30 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 30 (expr -> expr DOTADD expr .)
    IF              reduce using rule 30 (expr -> expr DOTADD expr .)
    ID              reduce using rule 30 (expr -> expr DOTADD expr .)
    $end            reduce using rule 30 (expr -> expr DOTADD expr .)
    }               reduce using rule 30 (expr -> expr DOTADD expr .)
    ELSE            reduce using rule 30 (expr -> expr DOTADD expr .)
    )               reduce using rule 30 (expr -> expr DOTADD expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DIV             shift and go to state 45
    MUL             shift and go to state 46


state 71

    (31) expr -> expr DIV expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 31 (expr -> expr DIV expr .)
    DOTDIV          reduce using rule 31 (expr -> expr DIV expr .)
    DOTMUL          reduce using rule 31 (expr -> expr DIV expr .)
    DOTSUB          reduce using rule 31 (expr -> expr DIV expr .)
    DOTADD          reduce using rule 31 (expr -> expr DIV expr .)
    DIV             reduce using rule 31 (expr -> expr DIV expr .)
    MUL             reduce using rule 31 (expr -> expr DIV expr .)
    SUB             reduce using rule 31 (expr -> expr DIV expr .)
    ADD             reduce using rule 31 (expr -> expr DIV expr .)
    NEQ             reduce using rule 31 (expr -> expr DIV expr .)
    EQ              reduce using rule 31 (expr -> expr DIV expr .)
    GTE             reduce using rule 31 (expr -> expr DIV expr .)
    LTE             reduce using rule 31 (expr -> expr DIV expr .)
    GT              reduce using rule 31 (expr -> expr DIV expr .)
    LT              reduce using rule 31 (expr -> expr DIV expr .)
    RETURN          reduce using rule 31 (expr -> expr DIV expr .)
    CONTINUE        reduce using rule 31 (expr -> expr DIV expr .)
    BREAK           reduce using rule 31 (expr -> expr DIV expr .)
    {               reduce using rule 31 (expr -> expr DIV expr .)
    PRINT           reduce using rule 31 (expr -> expr DIV expr .)
    FOR             reduce using rule 31 (expr -> expr DIV expr .)
    WHILE           reduce using rule 31 (expr -> expr DIV expr .)
    IF              reduce using rule 31 (expr -> expr DIV expr .)
    ID              reduce using rule 31 (expr -> expr DIV expr .)
    $end            reduce using rule 31 (expr -> expr DIV expr .)
    }               reduce using rule 31 (expr -> expr DIV expr .)
    ELSE            reduce using rule 31 (expr -> expr DIV expr .)
    )               reduce using rule 31 (expr -> expr DIV expr .)


state 72

    (32) expr -> expr MUL expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 32 (expr -> expr MUL expr .)
    DOTDIV          reduce using rule 32 (expr -> expr MUL expr .)
    DOTMUL          reduce using rule 32 (expr -> expr MUL expr .)
    DOTSUB          reduce using rule 32 (expr -> expr MUL expr .)
    DOTADD          reduce using rule 32 (expr -> expr MUL expr .)
    DIV             reduce using rule 32 (expr -> expr MUL expr .)
    MUL             reduce using rule 32 (expr -> expr MUL expr .)
    SUB             reduce using rule 32 (expr -> expr MUL expr .)
    ADD             reduce using rule 32 (expr -> expr MUL expr .)
    NEQ             reduce using rule 32 (expr -> expr MUL expr .)
    EQ              reduce using rule 32 (expr -> expr MUL expr .)
    GTE             reduce using rule 32 (expr -> expr MUL expr .)
    LTE             reduce using rule 32 (expr -> expr MUL expr .)
    GT              reduce using rule 32 (expr -> expr MUL expr .)
    LT              reduce using rule 32 (expr -> expr MUL expr .)
    RETURN          reduce using rule 32 (expr -> expr MUL expr .)
    CONTINUE        reduce using rule 32 (expr -> expr MUL expr .)
    BREAK           reduce using rule 32 (expr -> expr MUL expr .)
    {               reduce using rule 32 (expr -> expr MUL expr .)
    PRINT           reduce using rule 32 (expr -> expr MUL expr .)
    FOR             reduce using rule 32 (expr -> expr MUL expr .)
    WHILE           reduce using rule 32 (expr -> expr MUL expr .)
    IF              reduce using rule 32 (expr -> expr MUL expr .)
    ID              reduce using rule 32 (expr -> expr MUL expr .)
    $end            reduce using rule 32 (expr -> expr MUL expr .)
    }               reduce using rule 32 (expr -> expr MUL expr .)
    ELSE            reduce using rule 32 (expr -> expr MUL expr .)
    )               reduce using rule 32 (expr -> expr MUL expr .)


state 73

    (33) expr -> expr SUB expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 33 (expr -> expr SUB expr .)
    DOTSUB          reduce using rule 33 (expr -> expr SUB expr .)
    DOTADD          reduce using rule 33 (expr -> expr SUB expr .)
    SUB             reduce using rule 33 (expr -> expr SUB expr .)
    ADD             reduce using rule 33 (expr -> expr SUB expr .)
    NEQ             reduce using rule 33 (expr -> expr SUB expr .)
    EQ              reduce using rule 33 (expr -> expr SUB expr .)
    GTE             reduce using rule 33 (expr -> expr SUB expr .)
    LTE             reduce using rule 33 (expr -> expr SUB expr .)
    GT              reduce using rule 33 (expr -> expr SUB expr .)
    LT              reduce using rule 33 (expr -> expr SUB expr .)
    RETURN          reduce using rule 33 (expr -> expr SUB expr .)
    CONTINUE        reduce using rule 33 (expr -> expr SUB expr .)
    BREAK           reduce using rule 33 (expr -> expr SUB expr .)
    {               reduce using rule 33 (expr -> expr SUB expr .)
    PRINT           reduce using rule 33 (expr -> expr SUB expr .)
    FOR             reduce using rule 33 (expr -> expr SUB expr .)
    WHILE           reduce using rule 33 (expr -> expr SUB expr .)
    IF              reduce using rule 33 (expr -> expr SUB expr .)
    ID              reduce using rule 33 (expr -> expr SUB expr .)
    $end            reduce using rule 33 (expr -> expr SUB expr .)
    }               reduce using rule 33 (expr -> expr SUB expr .)
    ELSE            reduce using rule 33 (expr -> expr SUB expr .)
    )               reduce using rule 33 (expr -> expr SUB expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DIV             shift and go to state 45
    MUL             shift and go to state 46


state 74

    (34) expr -> expr ADD expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 34 (expr -> expr ADD expr .)
    DOTSUB          reduce using rule 34 (expr -> expr ADD expr .)
    DOTADD          reduce using rule 34 (expr -> expr ADD expr .)
    SUB             reduce using rule 34 (expr -> expr ADD expr .)
    ADD             reduce using rule 34 (expr -> expr ADD expr .)
    NEQ             reduce using rule 34 (expr -> expr ADD expr .)
    EQ              reduce using rule 34 (expr -> expr ADD expr .)
    GTE             reduce using rule 34 (expr -> expr ADD expr .)
    LTE             reduce using rule 34 (expr -> expr ADD expr .)
    GT              reduce using rule 34 (expr -> expr ADD expr .)
    LT              reduce using rule 34 (expr -> expr ADD expr .)
    RETURN          reduce using rule 34 (expr -> expr ADD expr .)
    CONTINUE        reduce using rule 34 (expr -> expr ADD expr .)
    BREAK           reduce using rule 34 (expr -> expr ADD expr .)
    {               reduce using rule 34 (expr -> expr ADD expr .)
    PRINT           reduce using rule 34 (expr -> expr ADD expr .)
    FOR             reduce using rule 34 (expr -> expr ADD expr .)
    WHILE           reduce using rule 34 (expr -> expr ADD expr .)
    IF              reduce using rule 34 (expr -> expr ADD expr .)
    ID              reduce using rule 34 (expr -> expr ADD expr .)
    $end            reduce using rule 34 (expr -> expr ADD expr .)
    }               reduce using rule 34 (expr -> expr ADD expr .)
    ELSE            reduce using rule 34 (expr -> expr ADD expr .)
    )               reduce using rule 34 (expr -> expr ADD expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DIV             shift and go to state 45
    MUL             shift and go to state 46


state 75

    (37) rel_expr -> expr NEQ expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 37 (rel_expr -> expr NEQ expr .)
    NEQ             reduce using rule 37 (rel_expr -> expr NEQ expr .)
    EQ              reduce using rule 37 (rel_expr -> expr NEQ expr .)
    GTE             reduce using rule 37 (rel_expr -> expr NEQ expr .)
    LTE             reduce using rule 37 (rel_expr -> expr NEQ expr .)
    GT              reduce using rule 37 (rel_expr -> expr NEQ expr .)
    LT              reduce using rule 37 (rel_expr -> expr NEQ expr .)
    RETURN          reduce using rule 37 (rel_expr -> expr NEQ expr .)
    CONTINUE        reduce using rule 37 (rel_expr -> expr NEQ expr .)
    BREAK           reduce using rule 37 (rel_expr -> expr NEQ expr .)
    {               reduce using rule 37 (rel_expr -> expr NEQ expr .)
    PRINT           reduce using rule 37 (rel_expr -> expr NEQ expr .)
    FOR             reduce using rule 37 (rel_expr -> expr NEQ expr .)
    WHILE           reduce using rule 37 (rel_expr -> expr NEQ expr .)
    IF              reduce using rule 37 (rel_expr -> expr NEQ expr .)
    ID              reduce using rule 37 (rel_expr -> expr NEQ expr .)
    $end            reduce using rule 37 (rel_expr -> expr NEQ expr .)
    }               reduce using rule 37 (rel_expr -> expr NEQ expr .)
    ELSE            reduce using rule 37 (rel_expr -> expr NEQ expr .)
    )               reduce using rule 37 (rel_expr -> expr NEQ expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48


state 76

    (38) rel_expr -> expr EQ expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 38 (rel_expr -> expr EQ expr .)
    NEQ             reduce using rule 38 (rel_expr -> expr EQ expr .)
    EQ              reduce using rule 38 (rel_expr -> expr EQ expr .)
    GTE             reduce using rule 38 (rel_expr -> expr EQ expr .)
    LTE             reduce using rule 38 (rel_expr -> expr EQ expr .)
    GT              reduce using rule 38 (rel_expr -> expr EQ expr .)
    LT              reduce using rule 38 (rel_expr -> expr EQ expr .)
    RETURN          reduce using rule 38 (rel_expr -> expr EQ expr .)
    CONTINUE        reduce using rule 38 (rel_expr -> expr EQ expr .)
    BREAK           reduce using rule 38 (rel_expr -> expr EQ expr .)
    {               reduce using rule 38 (rel_expr -> expr EQ expr .)
    PRINT           reduce using rule 38 (rel_expr -> expr EQ expr .)
    FOR             reduce using rule 38 (rel_expr -> expr EQ expr .)
    WHILE           reduce using rule 38 (rel_expr -> expr EQ expr .)
    IF              reduce using rule 38 (rel_expr -> expr EQ expr .)
    ID              reduce using rule 38 (rel_expr -> expr EQ expr .)
    $end            reduce using rule 38 (rel_expr -> expr EQ expr .)
    }               reduce using rule 38 (rel_expr -> expr EQ expr .)
    ELSE            reduce using rule 38 (rel_expr -> expr EQ expr .)
    )               reduce using rule 38 (rel_expr -> expr EQ expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48


state 77

    (39) rel_expr -> expr GTE expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 39 (rel_expr -> expr GTE expr .)
    NEQ             reduce using rule 39 (rel_expr -> expr GTE expr .)
    EQ              reduce using rule 39 (rel_expr -> expr GTE expr .)
    GTE             reduce using rule 39 (rel_expr -> expr GTE expr .)
    LTE             reduce using rule 39 (rel_expr -> expr GTE expr .)
    GT              reduce using rule 39 (rel_expr -> expr GTE expr .)
    LT              reduce using rule 39 (rel_expr -> expr GTE expr .)
    RETURN          reduce using rule 39 (rel_expr -> expr GTE expr .)
    CONTINUE        reduce using rule 39 (rel_expr -> expr GTE expr .)
    BREAK           reduce using rule 39 (rel_expr -> expr GTE expr .)
    {               reduce using rule 39 (rel_expr -> expr GTE expr .)
    PRINT           reduce using rule 39 (rel_expr -> expr GTE expr .)
    FOR             reduce using rule 39 (rel_expr -> expr GTE expr .)
    WHILE           reduce using rule 39 (rel_expr -> expr GTE expr .)
    IF              reduce using rule 39 (rel_expr -> expr GTE expr .)
    ID              reduce using rule 39 (rel_expr -> expr GTE expr .)
    $end            reduce using rule 39 (rel_expr -> expr GTE expr .)
    }               reduce using rule 39 (rel_expr -> expr GTE expr .)
    ELSE            reduce using rule 39 (rel_expr -> expr GTE expr .)
    )               reduce using rule 39 (rel_expr -> expr GTE expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48


state 78

    (40) rel_expr -> expr LTE expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 40 (rel_expr -> expr LTE expr .)
    NEQ             reduce using rule 40 (rel_expr -> expr LTE expr .)
    EQ              reduce using rule 40 (rel_expr -> expr LTE expr .)
    GTE             reduce using rule 40 (rel_expr -> expr LTE expr .)
    LTE             reduce using rule 40 (rel_expr -> expr LTE expr .)
    GT              reduce using rule 40 (rel_expr -> expr LTE expr .)
    LT              reduce using rule 40 (rel_expr -> expr LTE expr .)
    RETURN          reduce using rule 40 (rel_expr -> expr LTE expr .)
    CONTINUE        reduce using rule 40 (rel_expr -> expr LTE expr .)
    BREAK           reduce using rule 40 (rel_expr -> expr LTE expr .)
    {               reduce using rule 40 (rel_expr -> expr LTE expr .)
    PRINT           reduce using rule 40 (rel_expr -> expr LTE expr .)
    FOR             reduce using rule 40 (rel_expr -> expr LTE expr .)
    WHILE           reduce using rule 40 (rel_expr -> expr LTE expr .)
    IF              reduce using rule 40 (rel_expr -> expr LTE expr .)
    ID              reduce using rule 40 (rel_expr -> expr LTE expr .)
    $end            reduce using rule 40 (rel_expr -> expr LTE expr .)
    }               reduce using rule 40 (rel_expr -> expr LTE expr .)
    ELSE            reduce using rule 40 (rel_expr -> expr LTE expr .)
    )               reduce using rule 40 (rel_expr -> expr LTE expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48


state 79

    (41) rel_expr -> expr GT expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 41 (rel_expr -> expr GT expr .)
    NEQ             reduce using rule 41 (rel_expr -> expr GT expr .)
    EQ              reduce using rule 41 (rel_expr -> expr GT expr .)
    GTE             reduce using rule 41 (rel_expr -> expr GT expr .)
    LTE             reduce using rule 41 (rel_expr -> expr GT expr .)
    GT              reduce using rule 41 (rel_expr -> expr GT expr .)
    LT              reduce using rule 41 (rel_expr -> expr GT expr .)
    RETURN          reduce using rule 41 (rel_expr -> expr GT expr .)
    CONTINUE        reduce using rule 41 (rel_expr -> expr GT expr .)
    BREAK           reduce using rule 41 (rel_expr -> expr GT expr .)
    {               reduce using rule 41 (rel_expr -> expr GT expr .)
    PRINT           reduce using rule 41 (rel_expr -> expr GT expr .)
    FOR             reduce using rule 41 (rel_expr -> expr GT expr .)
    WHILE           reduce using rule 41 (rel_expr -> expr GT expr .)
    IF              reduce using rule 41 (rel_expr -> expr GT expr .)
    ID              reduce using rule 41 (rel_expr -> expr GT expr .)
    $end            reduce using rule 41 (rel_expr -> expr GT expr .)
    }               reduce using rule 41 (rel_expr -> expr GT expr .)
    ELSE            reduce using rule 41 (rel_expr -> expr GT expr .)
    )               reduce using rule 41 (rel_expr -> expr GT expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48


state 80

    (42) rel_expr -> expr LT expr .
    (27) expr -> expr . DOTDIV expr
    (28) expr -> expr . DOTMUL expr
    (29) expr -> expr . DOTSUB expr
    (30) expr -> expr . DOTADD expr
    (31) expr -> expr . DIV expr
    (32) expr -> expr . MUL expr
    (33) expr -> expr . SUB expr
    (34) expr -> expr . ADD expr
    (37) rel_expr -> expr . NEQ expr
    (38) rel_expr -> expr . EQ expr
    (39) rel_expr -> expr . GTE expr
    (40) rel_expr -> expr . LTE expr
    (41) rel_expr -> expr . GT expr
    (42) rel_expr -> expr . LT expr
    ;               reduce using rule 42 (rel_expr -> expr LT expr .)
    NEQ             reduce using rule 42 (rel_expr -> expr LT expr .)
    EQ              reduce using rule 42 (rel_expr -> expr LT expr .)
    GTE             reduce using rule 42 (rel_expr -> expr LT expr .)
    LTE             reduce using rule 42 (rel_expr -> expr LT expr .)
    GT              reduce using rule 42 (rel_expr -> expr LT expr .)
    LT              reduce using rule 42 (rel_expr -> expr LT expr .)
    RETURN          reduce using rule 42 (rel_expr -> expr LT expr .)
    CONTINUE        reduce using rule 42 (rel_expr -> expr LT expr .)
    BREAK           reduce using rule 42 (rel_expr -> expr LT expr .)
    {               reduce using rule 42 (rel_expr -> expr LT expr .)
    PRINT           reduce using rule 42 (rel_expr -> expr LT expr .)
    FOR             reduce using rule 42 (rel_expr -> expr LT expr .)
    WHILE           reduce using rule 42 (rel_expr -> expr LT expr .)
    IF              reduce using rule 42 (rel_expr -> expr LT expr .)
    ID              reduce using rule 42 (rel_expr -> expr LT expr .)
    $end            reduce using rule 42 (rel_expr -> expr LT expr .)
    }               reduce using rule 42 (rel_expr -> expr LT expr .)
    ELSE            reduce using rule 42 (rel_expr -> expr LT expr .)
    )               reduce using rule 42 (rel_expr -> expr LT expr .)
    DOTDIV          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTSUB          shift and go to state 43
    DOTADD          shift and go to state 44
    DIV             shift and go to state 45
    MUL             shift and go to state 46
    SUB             shift and go to state 47
    ADD             shift and go to state 48


state 81

    (23) value_vector -> value_vector , value .
    ,               reduce using rule 23 (value_vector -> value_vector , value .)
    ;               reduce using rule 23 (value_vector -> value_vector , value .)
    DOTDIV          reduce using rule 23 (value_vector -> value_vector , value .)
    DOTMUL          reduce using rule 23 (value_vector -> value_vector , value .)
    DOTSUB          reduce using rule 23 (value_vector -> value_vector , value .)
    DOTADD          reduce using rule 23 (value_vector -> value_vector , value .)
    DIV             reduce using rule 23 (value_vector -> value_vector , value .)
    MUL             reduce using rule 23 (value_vector -> value_vector , value .)
    SUB             reduce using rule 23 (value_vector -> value_vector , value .)
    ADD             reduce using rule 23 (value_vector -> value_vector , value .)
    NEQ             reduce using rule 23 (value_vector -> value_vector , value .)
    EQ              reduce using rule 23 (value_vector -> value_vector , value .)
    GTE             reduce using rule 23 (value_vector -> value_vector , value .)
    LTE             reduce using rule 23 (value_vector -> value_vector , value .)
    GT              reduce using rule 23 (value_vector -> value_vector , value .)
    LT              reduce using rule 23 (value_vector -> value_vector , value .)
    RETURN          reduce using rule 23 (value_vector -> value_vector , value .)
    CONTINUE        reduce using rule 23 (value_vector -> value_vector , value .)
    BREAK           reduce using rule 23 (value_vector -> value_vector , value .)
    {               reduce using rule 23 (value_vector -> value_vector , value .)
    PRINT           reduce using rule 23 (value_vector -> value_vector , value .)
    FOR             reduce using rule 23 (value_vector -> value_vector , value .)
    WHILE           reduce using rule 23 (value_vector -> value_vector , value .)
    IF              reduce using rule 23 (value_vector -> value_vector , value .)
    ID              reduce using rule 23 (value_vector -> value_vector , value .)
    $end            reduce using rule 23 (value_vector -> value_vector , value .)
    }               reduce using rule 23 (value_vector -> value_vector , value .)
    ELSE            reduce using rule 23 (value_vector -> value_vector , value .)
    ]               reduce using rule 23 (value_vector -> value_vector , value .)
    )               reduce using rule 23 (value_vector -> value_vector , value .)


state 82

    (16) int_referance -> referance .
    :               reduce using rule 16 (int_referance -> referance .)
    RETURN          reduce using rule 16 (int_referance -> referance .)
    CONTINUE        reduce using rule 16 (int_referance -> referance .)
    BREAK           reduce using rule 16 (int_referance -> referance .)
    {               reduce using rule 16 (int_referance -> referance .)
    ;               reduce using rule 16 (int_referance -> referance .)
    PRINT           reduce using rule 16 (int_referance -> referance .)
    FOR             reduce using rule 16 (int_referance -> referance .)
    WHILE           reduce using rule 16 (int_referance -> referance .)
    IF              reduce using rule 16 (int_referance -> referance .)
    ID              reduce using rule 16 (int_referance -> referance .)


state 83

    (17) for_stmt -> FOR referance = int_referance . : int_referance stmt
    :               shift and go to state 88


state 84

    (15) int_referance -> INTNUM .
    :               reduce using rule 15 (int_referance -> INTNUM .)
    RETURN          reduce using rule 15 (int_referance -> INTNUM .)
    CONTINUE        reduce using rule 15 (int_referance -> INTNUM .)
    BREAK           reduce using rule 15 (int_referance -> INTNUM .)
    {               reduce using rule 15 (int_referance -> INTNUM .)
    ;               reduce using rule 15 (int_referance -> INTNUM .)
    PRINT           reduce using rule 15 (int_referance -> INTNUM .)
    FOR             reduce using rule 15 (int_referance -> INTNUM .)
    WHILE           reduce using rule 15 (int_referance -> INTNUM .)
    IF              reduce using rule 15 (int_referance -> INTNUM .)
    ID              reduce using rule 15 (int_referance -> INTNUM .)


state 85

    (18) while_stmt -> WHILE ( rel_expr ) . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (19) print_stmt -> . PRINT expr
    (43) assign_expr -> . referance DIVASSIGN expr
    (44) assign_expr -> . referance MULASSIGN expr
    (45) assign_expr -> . referance SUBASSIGN expr
    (46) assign_expr -> . referance ADDASSIGN expr
    (47) assign_expr -> . referance = expr
    (17) for_stmt -> . FOR referance = int_referance : int_referance stmt
    (18) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (25) referance -> . ID [ value_vector ]
    (26) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 89
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 86

    (13) if_stmt -> IF ( rel_expr ) . stmt
    (14) if_stmt -> IF ( rel_expr ) . stmt ELSE stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (19) print_stmt -> . PRINT expr
    (43) assign_expr -> . referance DIVASSIGN expr
    (44) assign_expr -> . referance MULASSIGN expr
    (45) assign_expr -> . referance SUBASSIGN expr
    (46) assign_expr -> . referance ADDASSIGN expr
    (47) assign_expr -> . referance = expr
    (17) for_stmt -> . FOR referance = int_referance : int_referance stmt
    (18) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (25) referance -> . ID [ value_vector ]
    (26) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 90
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 87

    (25) referance -> ID [ value_vector ] .
    DIVASSIGN       reduce using rule 25 (referance -> ID [ value_vector ] .)
    MULASSIGN       reduce using rule 25 (referance -> ID [ value_vector ] .)
    SUBASSIGN       reduce using rule 25 (referance -> ID [ value_vector ] .)
    ADDASSIGN       reduce using rule 25 (referance -> ID [ value_vector ] .)
    =               reduce using rule 25 (referance -> ID [ value_vector ] .)
    :               reduce using rule 25 (referance -> ID [ value_vector ] .)
    RETURN          reduce using rule 25 (referance -> ID [ value_vector ] .)
    CONTINUE        reduce using rule 25 (referance -> ID [ value_vector ] .)
    BREAK           reduce using rule 25 (referance -> ID [ value_vector ] .)
    {               reduce using rule 25 (referance -> ID [ value_vector ] .)
    ;               reduce using rule 25 (referance -> ID [ value_vector ] .)
    PRINT           reduce using rule 25 (referance -> ID [ value_vector ] .)
    FOR             reduce using rule 25 (referance -> ID [ value_vector ] .)
    WHILE           reduce using rule 25 (referance -> ID [ value_vector ] .)
    IF              reduce using rule 25 (referance -> ID [ value_vector ] .)
    ID              reduce using rule 25 (referance -> ID [ value_vector ] .)


state 88

    (17) for_stmt -> FOR referance = int_referance : . int_referance stmt
    (15) int_referance -> . INTNUM
    (16) int_referance -> . referance
    (25) referance -> . ID [ value_vector ]
    (26) referance -> . ID
    INTNUM          shift and go to state 84
    ID              shift and go to state 18

    referance                      shift and go to state 82
    int_referance                  shift and go to state 91

state 89

    (18) while_stmt -> WHILE ( rel_expr ) stmt .
    RETURN          reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    CONTINUE        reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    BREAK           reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    {               reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    ;               reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    PRINT           reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    FOR             reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    WHILE           reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    IF              reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    ID              reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    $end            reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    }               reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)
    ELSE            reduce using rule 18 (while_stmt -> WHILE ( rel_expr ) stmt .)


state 90

    (13) if_stmt -> IF ( rel_expr ) stmt .
    (14) if_stmt -> IF ( rel_expr ) stmt . ELSE stmt
    RETURN          reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    CONTINUE        reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    BREAK           reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    {               reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    ;               reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    PRINT           reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    FOR             reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    WHILE           reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    IF              reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    ID              reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    $end            reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    }               reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    ELSE            shift and go to state 92


state 91

    (17) for_stmt -> FOR referance = int_referance : int_referance . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (19) print_stmt -> . PRINT expr
    (43) assign_expr -> . referance DIVASSIGN expr
    (44) assign_expr -> . referance MULASSIGN expr
    (45) assign_expr -> . referance SUBASSIGN expr
    (46) assign_expr -> . referance ADDASSIGN expr
    (47) assign_expr -> . referance = expr
    (17) for_stmt -> . FOR referance = int_referance : int_referance stmt
    (18) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (25) referance -> . ID [ value_vector ]
    (26) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    referance                      shift and go to state 14
    stmt                           shift and go to state 93
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11

state 92

    (14) if_stmt -> IF ( rel_expr ) stmt ELSE . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (19) print_stmt -> . PRINT expr
    (43) assign_expr -> . referance DIVASSIGN expr
    (44) assign_expr -> . referance MULASSIGN expr
    (45) assign_expr -> . referance SUBASSIGN expr
    (46) assign_expr -> . referance ADDASSIGN expr
    (47) assign_expr -> . referance = expr
    (17) for_stmt -> . FOR referance = int_referance : int_referance stmt
    (18) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (25) referance -> . ID [ value_vector ]
    (26) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 94
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 93

    (17) for_stmt -> FOR referance = int_referance : int_referance stmt .
    RETURN          reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    CONTINUE        reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    BREAK           reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    {               reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    ;               reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    PRINT           reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    FOR             reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    WHILE           reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    IF              reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    ID              reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    $end            reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    }               reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)
    ELSE            reduce using rule 17 (for_stmt -> FOR referance = int_referance : int_referance stmt .)


state 94

    (14) if_stmt -> IF ( rel_expr ) stmt ELSE stmt .
    RETURN          reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    CONTINUE        reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    BREAK           reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    {               reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    ;               reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    PRINT           reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    FOR             reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    WHILE           reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    IF              reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    ID              reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    $end            reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    }               reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    ELSE            reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
